{"version":3,"sources":["components/Jumbotron.js","components/Navbar.js","components/Wrapper.js","components/ClickPic.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","NavBar","state","this","props","currentScore","topScore","React","Component","Wrapper","children","ClickPic","src","imgLink","alt","onClick","clickHandler","id","App","picArray","pics","curScore","alreadyClicked","lossMsg","gameOver","_this","setState","handleClick","length","concat","Object","toConsumableArray","scoreIncrement","doShuffle","findDuplicate","array","i","j","Math","floor","random","_ref","cs","z","_this2","Navbar","components_Jumbotron","components_Wrapper","map","pic","components_ClickPic","key","image","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.546b4e48.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron\">\r\n            <h1>Welcome to the Clicky Game!</h1>\r\n            <p>Click as many individual pictures as you can! Don't click duplicates or you lose!</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\nimport './styles.css';\r\n\r\nclass NavBar extends React.Component{\r\n    state = {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar sticky-top\">                \r\n                <h4 className=\"nav-item navTitle\">Clicky-Game</h4>\r\n                <h4 className=\"nav-item\">Current Score: {this.props.currentScore}</h4>\r\n                <h4 className=\"nav-item\">Top Score: {this.props.topScore}</h4>                \r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport './styles.css';\r\n\r\nfunction ClickPic(props) {\r\n    return(\r\n        <img src={props.imgLink} \r\n            className=\"clickPic\" \r\n            alt=\"\" \r\n            onClick={() => props.clickHandler(props.id)}\r\n        ></img>\r\n    ); \r\n}\r\n\r\nexport default ClickPic;","import React from 'react';\nimport './App.css';\nimport Jumbotron from './components/Jumbotron';\nimport Navbar from './components/Navbar';\nimport Wrapper from './components/Wrapper';\nimport ClickPic from './components/ClickPic';\nimport pics from './pics.json'\n\nclass App extends React.Component {  \n  state={\n    picArray: pics,\n    curScore: 0,\n    topScore: 0,\n    alreadyClicked: [],\n    lossMsg: \"\"\n  } \n\n  gameOver = () => {\n    this.setState({\n      curScore: 0,\n      alreadyClicked: [],\n      lossMsg: \"Sorry, you lost. Click Another to try again!\"\n    })\n    if(this.state.curScore > this.state.topScore){\n      this.setState({\n        topScore: this.state.curScore\n      })\n    }\n  }\n  \n  handleClick = (id) =>{\n    if(this.state.alreadyClicked.length === 0){\n      this.setState({\n        alreadyClicked: [...this.state.alreadyClicked, id],\n        lossMsg: \"\"\n      });\n      this.scoreIncrement(this.state.curScore); \n      this.doShuffle(this.state.picArray);\n    }else{\n      let check = this.findDuplicate(id, this.state.alreadyClicked)      \n\n      if(!check){\n        this.setState({\n          alreadyClicked: [...this.state.alreadyClicked, id],\n          lossMsg: \"\"\n        });\n        this.scoreIncrement(this.state.curScore); \n        this.doShuffle(this.state.picArray);       \n      }else{\n        this.gameOver();\n      }\n    }\n\n  };\n\n  doShuffle = (array) =>{\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  scoreIncrement = (cs) =>{\n    cs+=1;\n    this.setState({\n      curScore: cs\n    })\n  };\n\n  findDuplicate = (id,array) => {\n    for(let z=0;z<array.length;z++){\n      let zzz = array[z]\n      if(zzz === id){\n        return true\n      }\n    }\n    \n    return false;\n  };\n\n  render(){    \n    return (\n      <div>\n        <Navbar \n          currentScore = {this.state.curScore}\n          topScore = {this.state.topScore}\n        />\n        <Jumbotron />\n        <Wrapper>\n          <h3 className=\"lossMsg\">{this.state.lossMsg}</h3>\n          {\n            this.state.picArray.map(\n              pic => <ClickPic \n                id = {pic.id}\n                key = {pic.id}\n                imgLink = {pic.image}\n                clickHandler = {this.handleClick}\n                alreadyClicked = {this.alreadyClicked}\n              />\n            )\n          }\n        </Wrapper>\n      </div>\n    );  \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}